{"uid":"a3091fca759b0517","name":"Validate Council Output [RochfordCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"1bb01030a3b95ea4a5571e55c760632c","time":{"start":1728333689643,"stop":1728333690539,"duration":896},"status":"failed","statusMessage":"ValueError: unconverted data remains:","statusTrace":"fixturefunc = <function scrape_step at 0x7f25bcc3a3e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[RochfordCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f25bcab5e10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/RochfordCouncil.py:36: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 1  November ', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:352: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: unconverted data remains:","statusTrace":"fixturefunc = <function scrape_step at 0x7f25bcc3a3e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[RochfordCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f25bcab5e10>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/RochfordCouncil.py:36: in parse_data\n    collection_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Friday 1  November ', format = '%A %d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n            raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\n        if len(data_string) != found.end():\n>           raise ValueError(\"unconverted data remains: %s\" %\n                              data_string[found.end():])\nE           ValueError: unconverted data remains:\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:352: ValueError","steps":[{"name":"Given the council","time":{"start":1728333689643,"stop":1728333689643,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1728333689643,"stop":1728333690539,"duration":896},"status":"failed","statusMessage":"unconverted data remains:  ","statusTrace":"ValueError: unconverted data remains:  \n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8a4759572744721d","name":"stdout","source":"8a4759572744721d.txt","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1535-56"},{"name":"thread","value":"2787-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"RochfordCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":150,"unknown":0,"total":165},"items":[{"uid":"daee5fdf11eaebd0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2165//#testresult/daee5fdf11eaebd0","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1728260775548,"stop":1728260776712,"duration":1164}},{"uid":"bfcd524663baa5b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2164//#testresult/bfcd524663baa5b7","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1728174127976,"stop":1728174129038,"duration":1062}},{"uid":"c28818ee63e0d83","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2160//#testresult/c28818ee63e0d83","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1728087372487,"stop":1728087373546,"duration":1059}},{"uid":"b781ca85454f093b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2152//#testresult/b781ca85454f093b","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1728001248971,"stop":1728001249593,"duration":622}},{"uid":"696eeb95d33a6692","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2148//#testresult/696eeb95d33a6692","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1727932939408,"stop":1727932940202,"duration":794}},{"uid":"f11beb87289139e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2146//#testresult/f11beb87289139e9","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1727914775755,"stop":1727914776867,"duration":1112}},{"uid":"ec2be920f23a6774","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2139//#testresult/ec2be920f23a6774","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1727828341047,"stop":1727828341853,"duration":806}},{"uid":"19f256c17883b211","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2138//#testresult/19f256c17883b211","status":"failed","statusDetails":"ValueError: unconverted data remains:","time":{"start":1727742043326,"stop":1727742044215,"duration":889}},{"uid":"5762cc808cf32422","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2137//#testresult/5762cc808cf32422","status":"passed","time":{"start":1727655821905,"stop":1727655822582,"duration":677}},{"uid":"1307daf613f3d98d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2136//#testresult/1307daf613f3d98d","status":"passed","time":{"start":1727569199776,"stop":1727569200749,"duration":973}},{"uid":"752c304b9d3937aa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2135//#testresult/752c304b9d3937aa","status":"passed","time":{"start":1727482899819,"stop":1727482900518,"duration":699}},{"uid":"1b98e9f4415e816e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2131//#testresult/1b98e9f4415e816e","status":"passed","time":{"start":1727422721355,"stop":1727422722240,"duration":885}},{"uid":"21a376e1c253f937","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2130//#testresult/21a376e1c253f937","status":"passed","time":{"start":1727396450483,"stop":1727396451822,"duration":1339}},{"uid":"c45c837deb4bfffd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2129//#testresult/c45c837deb4bfffd","status":"passed","time":{"start":1727309955042,"stop":1727309955868,"duration":826}},{"uid":"95de6632bf9482c7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2128//#testresult/95de6632bf9482c7","status":"passed","time":{"start":1727223551784,"stop":1727223552908,"duration":1124}},{"uid":"daf615fd3ce807e9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2127//#testresult/daf615fd3ce807e9","status":"passed","time":{"start":1727137259784,"stop":1727137261184,"duration":1400}},{"uid":"4b8eaab27037b30b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2126//#testresult/4b8eaab27037b30b","status":"passed","time":{"start":1727050774014,"stop":1727050775099,"duration":1085}},{"uid":"60a6f8da6357ad6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2125//#testresult/60a6f8da6357ad6e","status":"passed","time":{"start":1726964489239,"stop":1726964490524,"duration":1285}},{"uid":"8fb7099dbd90b1f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2124//#testresult/8fb7099dbd90b1f9","status":"passed","time":{"start":1726878093823,"stop":1726878094878,"duration":1055}},{"uid":"26f7e2756903267d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2123//#testresult/26f7e2756903267d","status":"passed","time":{"start":1726791653173,"stop":1726791654209,"duration":1036}}]},"tags":[]},"source":"a3091fca759b0517.json","parameterValues":["RochfordCouncil"]}