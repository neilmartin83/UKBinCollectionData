{"uid":"a164f2c42bef46cb","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1728261211624,"stop":1728261516258,"duration":304634},"status":"failed","statusMessage":"ValueError: time data 'October' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7ffa2f21fc40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ffa2fcb8b60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'October', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'October' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'October' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7ffa2f21fc40>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ffa2fcb8b60>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:85: in parse_data\n    recycling_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'October', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'October' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1728261211624,"stop":1728261211624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from the council","time":{"start":1728261211624,"stop":1728261516258,"duration":304634},"status":"failed","statusMessage":"time data 'October' does not match format '%d %B'","statusTrace":"ValueError: time data 'October' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[{"uid":"d0e7b9484db1a3dc","name":"stdout","source":"d0e7b9484db1a3dc.txt","type":"text/plain","size":116}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1385-569"},{"name":"thread","value":"2800-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":46,"broken":0,"skipped":0,"passed":118,"unknown":0,"total":164},"items":[{"uid":"ae555d79f99ae6c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/ae555d79f99ae6c4","status":"passed","time":{"start":1728174604592,"stop":1728174616846,"duration":12254}},{"uid":"682bfaa2aeeb8cb2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/682bfaa2aeeb8cb2","status":"passed","time":{"start":1728088063469,"stop":1728088077444,"duration":13975}},{"uid":"f3283bf0ae9f84","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/f3283bf0ae9f84","status":"passed","time":{"start":1728001945849,"stop":1728001982596,"duration":36747}},{"uid":"67b655ae9d48820f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/67b655ae9d48820f","status":"passed","time":{"start":1727933631504,"stop":1727933934671,"duration":303167}},{"uid":"f615f936c9f9b437","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/f615f936c9f9b437","status":"passed","time":{"start":1727915447389,"stop":1727915498672,"duration":51283}},{"uid":"20a9969a2ca35509","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/20a9969a2ca35509","status":"passed","time":{"start":1727829002680,"stop":1727829019663,"duration":16983}},{"uid":"e042b09bb7c540b3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/e042b09bb7c540b3","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f0fda8f13a <unknown>\n#1 0x55f0fd7755e0 <unknown>\n#2 0x55f0fd7c4be8 <unknown>\n#3 0x55f0fd7c4e81 <unknown>\n#4 0x55f0fd80b8c4 <unknown>\n#5 0x55f0fd7e9b4d <unknown>\n#6 0x55f0fd808d7d <unknown>\n#7 0x55f0fd7e98c3 <unknown>\n#8 0x55f0fd7b76b3 <unknown>\n#9 0x55f0fd7b868e <unknown>\n#10 0x55f0fda59b3b <unknown>\n#11 0x55f0fda5dac1 <unknown>\n#12 0x55f0fda46335 <unknown>\n#13 0x55f0fda5e642 <unknown>\n#14 0x55f0fda2b49f <unknown>\n#15 0x55f0fda7e038 <unknown>\n#16 0x55f0fda7e203 <unknown>\n#17 0x55f0fda8df8c <unknown>\n#18 0x7fc11fb38a94 <unknown>\n#19 0x7fc11fbc5a34 __clone","time":{"start":1727742665634,"stop":1727742735513,"duration":69879}},{"uid":"aa8642d38e2f7da5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/aa8642d38e2f7da5","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1727656005268,"stop":1727656025835,"duration":20567}},{"uid":"d40f64e8a0d516a1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/d40f64e8a0d516a1","status":"passed","time":{"start":1727569606947,"stop":1727569622315,"duration":15368}},{"uid":"e71ace1dc147dda3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/e71ace1dc147dda3","status":"passed","time":{"start":1727483569870,"stop":1727483591627,"duration":21757}},{"uid":"e30d3e4998750711","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/e30d3e4998750711","status":"passed","time":{"start":1727423390105,"stop":1727423417205,"duration":27100}},{"uid":"1b23dd5291e31d66","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/1b23dd5291e31d66","status":"passed","time":{"start":1727396874117,"stop":1727396907635,"duration":33518}},{"uid":"195fb37ca8ee7fb8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/195fb37ca8ee7fb8","status":"passed","time":{"start":1727310358450,"stop":1727310662660,"duration":304210}},{"uid":"7580523c55d4249c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/7580523c55d4249c","status":"passed","time":{"start":1727224322451,"stop":1727224350624,"duration":28173}},{"uid":"8bf6a1f7104ce286","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/8bf6a1f7104ce286","status":"passed","time":{"start":1727137676909,"stop":1727137703383,"duration":26474}},{"uid":"9014a68aa7fd778d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/9014a68aa7fd778d","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1727051335524,"stop":1727051347957,"duration":12433}},{"uid":"1c81bdbd5fe1148b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/1c81bdbd5fe1148b","status":"passed","time":{"start":1726965176716,"stop":1726965186068,"duration":9352}},{"uid":"1e9b64dfbb84b127","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/1e9b64dfbb84b127","status":"passed","time":{"start":1726878536326,"stop":1726878562166,"duration":25840}},{"uid":"2fa44eeb62bed633","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2123//#testresult/2fa44eeb62bed633","status":"passed","time":{"start":1726792343979,"stop":1726792383322,"duration":39343}},{"uid":"531871c11e2f0fd1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2122//#testresult/531871c11e2f0fd1","status":"passed","time":{"start":1726705931028,"stop":1726705948361,"duration":17333}}]},"tags":[]},"source":"a164f2c42bef46cb.json","parameterValues":["WestBerkshireCouncil"]}